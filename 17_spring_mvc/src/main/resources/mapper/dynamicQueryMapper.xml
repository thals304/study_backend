<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--  
	
	# Dynamic Query

		1) Mapper에서 SQL을 동적(if , foreach)으로 제어할 수 있다.
		
			[ 예시 ]
		
			1) 표현식 		:   #{}
			2) if    		:  	<if>
			3) choose		:  	<choose>
			4) when			: 	<when>
			5) otherwise 	: 	<otherwise>		
			6) foreach		:	<foreach>
		
		2) DAO에서 전송된 단일 데이터 , DTO의 field , Map의 key값을 조건절 속성에 표현식 없이 그대로 사용한다.
			
			[ 예시 ]
			
			<if test='productCode != null'>        : O
			<if test='#{productCode != null}'>     : X
			<if test='${productCode != null}'>     : X
			
			<if test='onePageViewCount != 0'>      : O  
			<if test='#{onePageViewCount != 0}'>   : X 
			<if test='${onePageViewCount != 0}'>   : X  
		
		
		3) 태그 속성구문에서 '' , "" 모두 사용 가능하다. 
		  	
			예시) 
				<when test = '조건식'>
				<when test = "조건식" >
		
		
		4) 조건절에서 && , || 연산자 대신에 and , or 키워드를 사용해야 한다.
	 
-->
	
<mapper namespace="com.application.mvc.chapter04_dynamicQuery.DynamicQueryDAO">
	

	<!-- [ if ] 사용예시 -->
	<select id="ifEx" parameterType="hashmap" resultType="productDTO">
		SELECT *
		FROM   PRODUCT
		WHERE  <if test="searchKeyword == 'enrollDt'">
					ENROLL_DT LIKE CONCAT('%' , #{searchWord}, '%')
			   </if>
			   <if test="searchKeyword == 'productNm'">
			   		PRODUCT_NM LIKE CONCAT('%' , #{searchWord}, '%')
			   </if>
		       
	</select>
	
	<!-- [ when ] 사용예시 -->
	<select id="whenEx" parameterType="hashmap" resultType="productDTO">
		SELECT *
		FROM   PRODUCT
		WHERE  
				<choose>
					<when test="searchKeyword.equals('enrollDt')">
						ENROLL_DT LIKE CONCAT('%' , #{searchWord}, '%')
					</when>
					<when test="searchKeyword.equals('productNm')">
						PRODUCT_NM LIKE CONCAT('%' , #{searchWord}, '%')
					</when>
				</choose>
		       
	</select>
	
	<!-- [ otherwise ] 사용예시 -->
	<select id="otherwiseEx" parameterType="int" resultType="productDTO">
		SELECT *
		FROM   PRODUCT
		WHERE  
				<choose>
					<when test="deliveryPrice == 0">
						DELIVERY_PRICE = 0
					</when>
					<otherwise>
						DELIVERY_PRICE != 0
					</otherwise>
				</choose>
		       
	</select>

	<!-- 
	
		# foreach
	
			- foreach 태그를 사용하여 SQL에 반복구문을 적용할 수 있다.
		
			[ foreach 속성 ]
		    
		    1) collection="반복객체"  
		    	- DAO에서 전달받은 반복이 가능한 객체를 작성한다.(list , array)
		    
		    2) item="변수"		      
		    	- 반복문에서 사용되어지는 변수 이름을 작성한다.
		    
		    3) separator="구분자"     
		    	- 반복 되는 쿼리문 사이의 구분자 문자열을 작성한다.
		    
		    4) index="인덱스"         
		    	- 인덱스 값을 지정할때 사용할 변수 이름을 작성한다. (0부터 순차적으로 증가)
		    	
		    5) open="시작문자열"      
		    	- 최종 반환값의 접두어를 작성한다.
		    	
		    6) close="종료문자열"	  
		    	- 최종 반환값의 접미어를 작성한다.
			
	-->
	
	<!-- [ foreach ] insert 사용예시  -->
	
	
	<!-- [ foreach ] select 사용예시  -->
	
	
	<!-- [ foreach ] delete 사용예시 -->
	
	
	
	<!-- [ foreach ] update 사용예시 -->
	
	
	<!-- [ foreach ] update 사용예시 -->
	<!-- update 쿼리를 전체 반복할 경우 데이터베이스 컨넥션 url에 allowMultiQueries=true옵션을 추가하여 사용한다. -->
	
	
	<!-- 
	
		# <where>
		
		- <where>태그는 단독으로 사용되지 않고 <if>, <choose>와 같은 태그들을 내포하여 SQL들을 연결하여 준다.
		
		- 앞 뒤에 필요한 구문들(AND, OR)을 생략하는 역할을 한다.
	
	 -->
	 
	<!-- [ where ] 사용예시 --> 
	
	
	<!-- 
	
		# <set>
		
		- <set>태그는 단독으로 사용되지 않고 <if>, <choose>와 같은 태그들을 내포하여 SQL들을 연결하여 준다.
		
		- SQL앞 뒤에 적용되지 않는 구문(,)을 생략하여 준다.
	
	 -->
	
	<!-- [ set ] 사용예시 --> 
		
</mapper> 